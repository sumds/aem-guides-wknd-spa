def registry = 'http://3.85.103.123:8082'
pipeline{
    agent any

    tools{
        maven 'maven-3.9.3'
    }
    
    options {
        timestamps()
    }

    parameters {
        choice choices: ['master', 'develop', 'feature', 'qa'], name: 'branchName'
        string defaultValue: 'https://github.com/sumds/aem-guides-wknd-spa.git', name: 'giturl'
    }

    stages{
        stage("Checkout from git"){
            steps{
                git branch: "${params.branchName}",credentialsId: 'sumds', url: "${params.giturl}"
            }
        }
        
        stage("Build"){
            steps{
                echo '<--------------- Building --------------->'
                // sh "mvn clean install"
                sh "mvn clean install -Dmaven.test.skip=true"
                echo "----------- build completed ----------"
            }
        }

        stage('Unit Test') {
            steps{
                echo '<--------------- Unit Testing started  --------------->'
                // sh "mvn clean install"
                sh "mvn clean install -Dmaven.test.skip=true"
                echo '<------------- Unit Testing stopped  --------------->'
            }
        }

        // stage("Execute sonarqube report"){
        //     steps{
        //         sh "mvn sonar:sonar"
        //     }
        // }

        stage("AEM Publish") {
            steps {
                script {
                        echo '<--------------- AEM package Publish Started --------------->'
                        def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog_access"
                        def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                        //upload specifications
                        def uploadSpec = """{
                            "files": [
                                {
                                "pattern": "deployment/target/(*)",
                                "target": "aem-local-demo-snapshot-repo/{1}",
                                "flat": "false",
                                "props" : "${properties}",
                                "exclusions": [ "*.sha1", "*.md5", "*.jar", "*.xml", "*.properties"]
                                }
                            ]
                        }"""
                        def buildInfo = server.upload(uploadSpec)
                        buildInfo.env.collect()
                        server.publishBuildInfo(buildInfo)
                        echo '<--------------- AEM package Publish Ended --------------->'  
                
                }
            }   
        }     
    }
}