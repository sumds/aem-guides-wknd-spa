def registry = 'http://3.83.153.155:8082/artifactory' //jfrog repo url
def URL = "/crx/packmgr/service.jsp"

pipeline {
    agent any
    tools{
        maven 'maven-3.9.3'
    }
    
    options {
        timestamps()
    }

    //security    
    parameters {
        choice choices: ['master', 'develop', 'feature', 'qa'], name: 'branchName'
        string defaultValue: 'https://github.com/sumds/aem-guides-wknd-spa.git', name: 'giturl'
    }

    stages {
        stage("Checkout from git"){
            steps{
                git branch: "${params.branchName}",credentialsId: 'sumds', url: "${params.giturl}"
            }
        }

        stage('Build AEM Project') {
            steps {
                // Build the AEM project using Maven
                sh 'mvn clean install'
            }
        }

        stage('Unit Test') {
            steps{
                echo '<--------------- Unit Testing started  --------------->'
                //sh 'mvn surefire-report:report' -->not working
                echo '<------------- Unit Testing stopped  --------------->'
            }
        }

        stage("SonarQube Analysis"){
             steps{
                 withSonarQubeEnv('sonar'){
                     sh "mvn sonar:sonar"
                 }                
             }
        }

         stage("Quality Gate"){
             steps{
                 script{
                     echo '<--------------- Sonar Gate Analysis Started --------------->'
                     timeout(time: 1, unit: 'HOURS'){
                        def qg = waitForQualityGate()
                         if(qg.status !='OK') {
                             error "Pipeline failed due to quality gate failures: ${qg.status}"
                         }
                     }
                 }
             }
         }

        stage('Upload to Artifactory') {
            steps {
                script {
                    echo "GIT_BRANCH: ${env.GIT_BRANCH}"
                    try{
                        // Upload the build to JFrog Artifactory
                        def server = Artifactory.newServer url:registry,  credentialsId:"jfrog_access"
                        def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";

                         // Define upload spec
                        def uploadSpec = """{
                            "files": [
                                {
                                    "pattern": "deployment/target/*.zip",
                                    "target": "wknd-spa-libs-snapshot-local/",
                                    "props" : "${properties}",
                                    "exclusions": [ "*.sha1", "*.md5", "*.jar", "*.xml", "*.properties"]
                                }
                            ]
                        }"""

                        // Upload the package
                        def buildInfo = server.upload(uploadSpec)
                        buildInfo.env.collect()
                        server.publishBuildInfo(buildInfo)
                    }catch (Exception e) {
                        echo "Failed to upload to Artifactory: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        // stage('Deploy to Dev') {
        //     steps {
        //         // Deploy the AEM package to the Dev instance
        //         sh 'curl -u $user:$password -X POST -F file=@"aem-guides-wknd-spa.react.all-1.0.0-SNAPSHOT.zip" -F name="aem-guides-wknd-spa.react.all-1.0.0-SNAPSHOT" -F force=true -F install=true http://54.152.188.106:4502$URL'
        //     }
        // }

        // stage('Deploy to Staging') {
        //     steps {
        //         // Deploy the AEM package to the Staging instance
        //         sh 'curl -u $user:$password -X POST -F file=@"aem-guides-wknd-spa.react.all-1.0.0-SNAPSHOT.zip" -F name="aem-guides-wknd-spa.react.all-1.0.0-SNAPSHOT" -F force=true -F install=true http://54.152.188.106:4502$URL'
        //     }
        // }

        stage('Manual Approval for Production') {
            steps {
                // Pause the pipeline and wait for user input
                input message: 'Approve deployment to Production?', submitter: 'sumit.b.das@capgemini.com'
            }
        }

//check tag
        // stage('Check Tag') {
        //      steps {
        //         script {
        //                 def versionExists = sh(script: "jfrog rt s --url=${ARTIFACTORY_URL} --user=${env.ARTIFACTORY_USERNAME} --password=${env.ARTIFACTORY_API_KEY} ${ARTIFACTORY_REPO}/${TAG_TO_DEPLOY}/", returnStatus: true) == 0
        //                 if (versionExists) {
        //                     echo "Tag '${TAG_TO_DEPLOY}' exists in ${ARTIFACTORY_REPO} repository."
        //                     } else {
        //                         error "Tag '${TAG_TO_DEPLOY}' does not exist in ${ARTIFACTORY_REPO} repository. Deployment aborted."
        //                     }
        //                 }
        //             }
        // }

        stage('Deploy to Production') {            
            steps {
                // Deploy the AEM package to the Production instance using Artifactory                
                script {
                    // def previousVersion = $env.PREVIOUS_BUILD_NUMBER
                    // echo ('printing the previous version')
	                // echo $previousVersion
                    def server = Artifactory.newServer url:registry,  credentialsId:"jfrog_access"
                    def deployspec = """{
                        "files": [
                            {
                            "pattern": "aem-local-demo-snapshot-repo/*.zip",
                            "target": "jfrog-release/",
                            "flat": "false"                            
                            }
                        ]
                    }"""
                    def buildInfo = server.download(deployspec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                }
                try{
                    dir('jfrog-release') {
                        withCredentials([
                            usernamePassword(credentialsId: 'aem-author-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'),
                            ])
                            {
                                sh 'curl -u $USERNAME:$PASSWORD -F file=@"aem-guides-wknd-spa.react.all-2.0.0-SNAPSHOT.zip" -F name="aem-guides-wknd-spa.react.all-2.0.0-SNAPSHOT" -F force=true -F install=true http://34.227.18.71:4502$URL'
                            }
                    }
                }
                catch(Exception e) {                        
                    handleFailure("Error deploying AEM package: ${e.getMessage()}")
                }
            }
        }

        stage('Run Tests') {
            steps {
                // Add test execution steps if we have automated tests for SABB project
                // For example: sh 'mvn test'
                echo "running automated tests"

            }
        }
    }

    post {
        success {
            echo 'AEM Deployment Pipeline successful!'
        }
        failure {
            echo 'AEM Deployment Pipeline failed.'
        }
    }
}
